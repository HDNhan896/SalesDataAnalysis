import json
import csv
from datetime import datetime

# Read configuration from JSON file
with open('config.json', 'r') as file:
    config = json.load(file)
    
    
def get_week_stats(data):
    week_data = {} # Dict r·ªóng
    
    for row in data[1:]:
        week_index = datetime.strptime(row[0], "%Y-%m-%d").isocalendar().week # L·∫•y th√°ng t·ª´ c·ªôt date
        revenue = int(row[6]) # C·ªôt doanh thu
        quantity = int(row[4])
        
        # N·∫øu ch∆∞a c√≥ th√°ng n√†y trong dict th√¨ kh·ªüi t·∫°o dict con
        if week_index not in week_data:
            week_data[week_index] = {"amount": 0, "transactions": 0, "quantity" : 0}

        # C·ªông d·ªìn v√†o th√°ng t∆∞∆°ng ·ª©ng
        week_data[week_index]["amount"] += revenue
        week_data[week_index]["transactions"] += 1
        week_data[week_index]["quantity"] += quantity
    return week_data
    
# Function to calculate total revenue per month
def get_monthly_stats(data):
    monthly_data = {} # Dict r·ªóng
    for i in range(1,13):
        monthly_data[i] = {"revenue" : 0, "transactions" : 0}
    for row in data[1:]:
        month_index = int(row[0].split('-')[1]) # L·∫•y th√°ng t·ª´ c·ªôt date
        revenue = int(row[6]) # C·ªôt doanh thu

        # C·ªông d·ªìn v√†o th√°ng t∆∞∆°ng ·ª©ng
        monthly_data[month_index]["revenue"] += revenue
        monthly_data[month_index]["transactions"] += 1
    return monthly_data



def get_product_stats(data):
    products_stats = {} # Dict r·ªóng
    
    for row in data[1:]:
        # L·∫•y data t·ª´ trong csv g√°n cho t·ª´ng d·ªØ li·ªáu
        product_id = row[1] # M√£ s·∫£n ph·∫©m
        product_name = row[2] # T√™n s·∫£n ph·∫©m
        product_category = row[3] # Doanh m·ª•c
        product_quantity = int(row[4]) # S·ªë l∆∞·ª£ng
        product_amount = int(row[6]) # Doanh thu
        
        # N·∫øu ch∆∞a c√≥ s·∫£n ph·∫©m n√†y trong dict th√¨ kh·ªüi t·∫°o dict con
        if product_id not in products_stats:
            products_stats[product_id] = {'name': product_name, 'category': product_category, 'quantity': 0, 'amount': 0}
        
        # C·ªông d·ªìn v√†o s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng (s·ªë l∆∞·ª£ng v√† doanh thu)
        products_stats[product_id]['quantity'] += product_quantity
        products_stats[product_id]['amount'] += product_amount
        
    return products_stats



def get_customer_stats(data):
    customer_stats = {}
    
    for row in data[1:]:
        # L·∫•y data t·ª´ trong csv g√°n cho t·ª´ng d·ªØ li·ªáu
        customer_id = row[7] # M√£ kh√°ch h√†ng
        customer_quantity = int(row[4]) # T·ªïng s·∫£n ph·∫©m kh√°ch h√†ng ƒë√£ mua
        customer_purchased = int(row[6]) # T·ªïng ti·ªÅn kh√°ch ƒë√£ mua
        customer_order_date = datetime.strptime(row[0], "%Y-%m-%d") # Ng√†y m√† kh√°ch mua h√†ng
        # N·∫øu ch∆∞a c√≥ s·∫£n ph·∫©m n√†y trong dict th√¨ kh·ªüi t·∫°o dict con
        if customer_id not in customer_stats:
            customer_stats[customer_id] = {
                'amount': customer_purchased, 
                'quantity': customer_quantity,
                'order_time' : 1,
                'first_purchase_date': customer_order_date, 
                'last_purchase_date' : customer_order_date
            }
        else:
            if customer_order_date < customer_stats[customer_id]['first_purchase_date']:
                customer_stats[customer_id]['first_purchase_date'] = customer_order_date
            
            if customer_order_date > customer_stats[customer_id]['last_purchase_date']:
                customer_stats[customer_id]['last_purchase_date'] = customer_order_date
            customer_stats[customer_id]['amount'] += customer_purchased
            customer_stats[customer_id]['quantity'] += customer_quantity
            customer_stats[customer_id]['order_time'] += 1
        
        
        # C·ªông d·ªìn v√†o s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng (s·ªë l∆∞·ª£ng v√† doanh thu)
    customer_stats = dict(sorted(customer_stats.items(), key = lambda x : x[0] , reverse = False))
    return customer_stats

def get_category_stats(data):
    category_stats = {}
    category_customers = {}
    for row in data[1:]:
        category_name = row[3]
        category_quantity = int(row[4])
        category_amount = int(row[6])
        customer_id = row[7]
        if category_name not in category_stats:
            category_stats[category_name] = {'quantity': category_quantity, 'amount': category_amount}
            category_customers[category_name] = set([customer_id])
        else:
            category_stats[category_name]['quantity'] += category_quantity
            category_stats[category_name]['amount'] += category_amount
            category_customers[category_name].add(customer_id)
    for row in category_stats:
        category_stats[row]['customer_count'] = len(category_customers[row])
    return category_stats


# Function to find the best selling day
def best_selling(data, index):
    day_sales = {}
    for row in data[1:]:
        day = row[index]
        revenue = int(row[6])
        if day in day_sales:
            day_sales[day] += revenue
        else:
            day_sales[day] = revenue
    return day_sales


# Function choice
def selectOneOne():
    # Inport file CSV v√†o
    with open('sales_data.csv', newline='', encoding="utf-8-sig") as file:
        reader = csv.reader(file, delimiter=',')
        data = list(reader)
    print("File CSV ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng.")
    print()
    return data

def selectOneTwo():
    # Khai b√°o 1 dictionary ƒë·ªÉ t√≠nh t·ªïng doang thu v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ b√°n c·ªßa t·ª´ng th√°ng
    monthly_data = get_monthly_stats(data) 
    
    # T√≠nh xem th√°ng c√≥ doanh thu nhi·ªÅu nh·∫•t v√† th·∫•p nh·∫•t l√† th√°ng n√†o
    max_month_index = max(monthly_data, key=lambda m: monthly_data[m]['revenue'])
    min_month_index = min(monthly_data, key=lambda m: monthly_data[m]['revenue'])
    
    day_sell = best_selling(data, 0) #T√≠nh doanh thu c·ªßa t·ª´ng ng√†y
    type_sell = best_selling(data, 3) #T√≠nh doanh thu c·ªßa t·ª´ng lo·∫°i m·∫∑t h√†ng
    
    total = sum(int(row[6]) for row in data[1:]) #T√≠nh t·ªïng doanh thu c·ªßa c·∫£ file sales_data.csv
    total_Aver = total / (len(data)-1) #T√≠nh t·ªïng doang thu trung b√¨nh c·ªßa c·∫£ file sales_data.csv
    best_type_top4 = sorted(type_sell.items(), key=lambda x: x[1], reverse=True)[:4] #H√†m ƒë·ªÉ th·ª±c hi·ªán vi·ªác s·∫Øp x·∫øp doanh thu c·ªßa t·ª´ng lo·∫°i m·∫∑t h√†ng (l·ªõn -> b√©)

    #H√†m ƒë·ªÉ formatted gi√° tr·ªã INT th√†nh gi√° tr·ªã ti·ªÅn t·ªá (1000000 -> 1,000,000 VND)
    totalFormatted = f"{total:,} VND" 
    averageTotalFormatted = f"{total_Aver:,.2f} VND"
    maxMonthFormatted = f"{monthly_data[max_month_index]['revenue']:,} VND"
    minMonthFormatted = f"{monthly_data[min_month_index]['revenue']:,} VND"
    
    
    print("\n========== TH·ªêNG K√ä T·ªîNG QUAN ==========")
    print("Th·ªùi gian ph√¢n t√≠ch: {} ƒë·∫øn {}".format(config["date_range"]["start"], config["date_range"]["end"]))
    print("\nüìä D·ªØ li·ªáu c∆° b·∫£n: ")
    print("- T·ªïng s·ªë giao d·ªãch:", len(data)-1)
    print("- T·ªïng doanh thu:", totalFormatted)
    print("- Trung b√¨nh/giao d·ªãch:", averageTotalFormatted)
    print("- S·ªë s·∫£n ph·∫©m kh√°c nhau:", len(set(row[1] for row in data[1:])))
    print("- S·ªë kh√°ch h√†ng:", len(set(row[7] for row in data[1:])))
    print("\nüìà Theo th·ªùi gian:")
    print("- Th√°ng cao nh·∫•t: Th√°ng {} ({})".format(max_month_index, maxMonthFormatted))
    print("- Th√°ng th·∫•p nh·∫•t: Th√°ng {} ({})".format(min_month_index, minMonthFormatted))
    print("- Ng√†y b√°n nhi·ªÅu nh·∫•t:", max(day_sell, key=day_sell.get))
    print()
    print("üèÜ Top danh m·ª•c:")
    for i in range(1,5):
        print("{}. {}: {} ({:.2f}%)".format(i, best_type_top4[i - 1][0], f"{best_type_top4[i - 1][1]:,} VND", (best_type_top4[i - 1][1] / total) * 100))
        
    
def selectTwoOne():
    monthly_data = get_monthly_stats(data)
    
    print("\n===================== DOANH THU THEO TH√ÅNG NƒÇM 2024 ======================")
    print("| Th√°ng | Doanh thu (VND)    | S·ªë GD | TB/GD (VND) | So v·ªõi th√°ng tr∆∞·ªõc  |")
    print("|-------|--------------------|-------|-------------|---------------------| ")
    for i in range (1,13):
        revenue = monthly_data[i]['revenue']
        transactions = monthly_data[i]['transactions']
        avg = revenue / transactions if transactions else 0

        if i == 1:
            change_str = "..."
        else:
            prev = monthly_data[i - 1]['revenue']
            change = ((revenue / prev) * 100) - 100 if prev else 0 # Ch·ªâ th·ª±c hi·ªán khi prev != 0
            change_str = f"‚Üì{change:,.2f}%" if change < 0 else f"‚Üë+{change:,.2f}%"   # ƒê·ªãnh d·∫°ng c√≥ d·∫•u %

        print(f"| {i:<6}| {revenue:<19,}| {transactions:<6}| {avg:<12.2f}| {change_str:<19} |")
    print("==========================================================================")
    
def selectTwoTwo():
    monthly_data = get_monthly_stats(data)
    index = 1
    total_3_month = 0
    total_3_transactions = 0
    prev_total_3_month = None 
    
    print("\n====================== DOANH THU THEO QU√ù NƒÇM 2024 ====================")
    print("| Th√°ng | Doanh thu (VND)    | S·ªë GD | TB/GD (VND) | So v·ªõi qu√Ω tr∆∞·ªõc |")
    print("|-------|--------------------|-------|-------------|------------------|")
    for i in range (1,13):
        revenue = monthly_data[i]['revenue']
        transactions = monthly_data[i]['transactions']
        total_3_transactions += transactions
        total_3_month += revenue
        avg = total_3_month / total_3_transactions if total_3_transactions else 0
        
        if i % 3 == 0:
            if i == 3:
                change_str = "..."
            else:
                change = ((total_3_month / prev_total_3_month) * 100) - 100 if prev_total_3_month else 0 # Ch·ªâ th·ª±c hi·ªán khi prev != 0
                change_str = f"‚Üì{change:,.2f}%" if change < 0 else f"‚Üë+{change:,.2f}%"   # ƒê·ªãnh d·∫°ng c√≥ d·∫•u %
                
            print(f"| Qu√Ω {(index):<2}| {total_3_month:<19,}| {total_3_transactions:<6}| {avg:<12.2f}| {change_str:<17}|")
            index += 1
            prev_total_3_month = total_3_month
            total_3_month = 0
            total_3_transactions = 0
    print("=======================================================================")

def selectTwoThree():
    week_data = get_week_stats(data)
    week_data = dict(sorted(week_data.items(), key = lambda x : x[0] , reverse = False))
    prev_week = None 
    
    print("\n==================== DOANH THU THEO TU·∫¶N NƒÇM 2024 ====================")
    print("| Tu·∫ßn | Doanh thu (VND)    | S·ªë GD | TB/GD (VND) | So v·ªõi tu·∫ßn tr∆∞·ªõc |")
    print("|------|--------------------|-------|-------------|-------------------|")
    for row in week_data:
        week = row
        week_amount = week_data[row]['amount']
        week_transactions = week_data[row]['transactions']
        week_amount_average = week_amount/week_transactions
        if int(row) == 1:
            change_str = "..."
        else:
            change = ((week_amount / week_data[prev_week]['amount']) * 100) - 100 if prev_week else 0 # Ch·ªâ th·ª±c hi·ªán khi prev != 0
            change_str = f"‚Üì{change:,.2f}%" if change < 0 else f"‚Üë+{change:,.2f}%"   # ƒê·ªãnh d·∫°ng c√≥ d·∫•u %
        prev_week = row
        week_amount = f"{week_amount:,} VND"
        print(f"| {week:<4} | {week_amount:>18} | {week_transactions:>5} | {week_amount_average:>11.2f} | {change_str:<17} |")
        
    print("=======================================================================")


def selectThreeOne():
    products_data = get_product_stats(data)
    products_data_top10 = dict(sorted(products_data.items(), key = lambda x : x[1]['amount'], reverse = True)[:10])
    index = 0
    total = sum(int(row[6]) for row in data[1:])
    print("\n================================== TOP 10 S·∫¢N PH·∫®M B√ÅN CH·∫†Y =================================")
    print("| H·∫°ng | M√£ SP | T√™n s·∫£n ph·∫©m              | Danh m·ª•c    | S·ªë l∆∞·ª£ng | Doanh thu     | T·ª∑ l·ªá |")
    print("|------|-------|---------------------------|-------------|----------|---------------|-------|")
    for product in products_data_top10:
        product_id = product # M√£ s·∫£n ph·∫©m
        product_name = products_data_top10[product]['name'] # T√™n s·∫£n ph·∫©m
        product_category = products_data_top10[product]['category'] # Doanh m·ª•c
        product_quantity = products_data_top10[product]['quantity'] # S·ªë l∆∞·ª£ng
        product_amount = f"{products_data_top10[product]['amount']:,} VND" # Doanh thu
        change = f"{((float(products_data_top10[product]['amount'] * 100)) / total) :,.2f}%"
        print(f"| {index + 1:<4} | {product_id:<6}| {product_name:<26}| {product_category:<12}| {product_quantity:<9}| {product_amount:<14}| {change:<6}|")
        index += 1
    print("=============================================================================================")
    
def selectThreeTwo():
    total = sum(int(row[6]) for row in data[1:])
    type_sell = get_category_stats(data)       
    type_sell = dict(sorted(type_sell.items(), key = lambda x : x[1]['amount'], reverse = True)) 
    print("\n===================== PH√ÇN T√çCH THEO DOANH M·ª§C =======================")
    print("|    Danh m·ª•c    | Doanh thu (VND) | S·ªë l∆∞·ª£ng | Kh√°ch h√†ng |  T·ª∑ l·ªá  |")
    print("|----------------|-----------------|----------|------------|---------|") 
    for row in type_sell:
        category_name = row
        category_amount = f"{type_sell[row]['amount']:,} VND"
        category_quantity = type_sell[row]['quantity']
        customer_count = type_sell[row]['customer_count']
        revenue_percent = f"{(type_sell[row]['amount'] / total) * 100:,.2f}%"
        
        print(f"| {category_name:15}| {category_amount:>14} | {category_quantity:> 8} | {customer_count:>10} | {revenue_percent:<7} |")
    print("======================================================================")  
    
def selectThreeThree():
    products_data = get_product_stats(data)
    products_data_worst = dict(sorted(products_data.items(), key = lambda x : x[1]['amount'], reverse = False)[:10])
    index = 0
    total = sum(int(row[6]) for row in data[1:])
    print("\n=================================== TOP 10 S·∫¢N PH·∫®M B√ÅN ·∫æ ===================================")
    print("| H·∫°ng | M√£ SP | T√™n s·∫£n ph·∫©m              | Danh m·ª•c    | S·ªë l∆∞·ª£ng | Doanh thu     | T·ª∑ l·ªá |")
    print("|------|-------|---------------------------|-------------|----------|---------------|-------|")
    for product in products_data_worst:
        product_id = product # M√£ s·∫£n ph·∫©m
        product_name = products_data_worst[product]['name'] # T√™n s·∫£n ph·∫©m
        product_category = products_data_worst[product]['category'] # Doanh m·ª•c
        product_quantity = products_data_worst[product]['quantity'] # S·ªë l∆∞·ª£ng
        product_amount = f"{products_data_worst[product]['amount']:,} VND" # Doanh thu
        change = f"{((float(products_data_worst[product]['amount'] * 100)) / total) :,.2f}%"
        print(f"| {index + 1:<4} | {product_id:<6}| {product_name:<26}| {product_category:<12}| {product_quantity:<9}| {product_amount:<14}| {change:<6}|")
        index += 1
    print("=============================================================================================")   
    
def selectFourOne():
    vip_requirement = config["vip_requirement"]
    customer_data = get_customer_stats(data)
    print("\n========================= DANH S√ÅCH KH√ÅCH H√ÄNG VIP ========================")
    print("| M√£ kh√°ch h√†ng |   T·ªïng chi ti√™u   | ƒê√£ mua | Mua g·∫ßn ƒë√¢y | T·∫ßn su·∫•t mua |")
    print("|---------------|-------------------|--------|-------------|--------------|")
    for row in customer_data:
        # L·∫•y d·ªØ li·ªáu c·ªßa t·ª´ng kh√°ch h√†ng
        customer_id = row
        customer_amount = customer_data[row]['amount']
        customer_quantity = customer_data[row]['quantity']
        customer_last_order_date = customer_data[row]['last_purchase_date']
        months = ((customer_data[row]['last_purchase_date'] - customer_data[row]['first_purchase_date']).days) / 30
        
        
        if months == 0:
            purchase_frequency = customer_quantity  
        else:
            purchase_frequency = customer_quantity / months
        # N·∫øu kh√°ch h√†ng mua tr√™n 7,500,000 VND th√¨ s·∫Ω l√† kh√°ch VIP
        if customer_amount >= vip_requirement:
            customer_amount = f"{customer_amount:,} VND"
            last_date_str = customer_last_order_date.strftime("%Y-%m-%d")
            print(f"|    {customer_id:<11}|  {customer_amount:>17}|{customer_quantity:>7} |{last_date_str:>12} | {int(purchase_frequency):>2} l·∫ßn/th√°ng |")
    print("===========================================================================")
    
def selectFourTwo():
    selectFourOne()
    vip_requirement = config["vip_requirement"]
    normal_requirement = config["normal_requirement"]
    customer_data = get_customer_stats(data)
    
    print("\n======================== DANH S√ÅCH KH√ÅCH H√ÄNG TH∆Ø·ªúNG ======================")
    print("| M√£ kh√°ch h√†ng |   T·ªïng chi ti√™u   | ƒê√£ mua | Mua g·∫ßn ƒë√¢y  | T·∫ßn su·∫•t mua |")
    print("|---------------|-------------------|--------|--------------|--------------|")
    for row in customer_data:
        # L·∫•y d·ªØ li·ªáu c·ªßa t·ª´ng kh√°ch h√†ng
        customer_id = row
        customer_amout = customer_data[row]['amount']
        customer_quantity = customer_data[row]['quantity']
        customer_last_order_date = customer_data[row]['last_purchase_date']
        months = ((customer_data[row]['last_purchase_date'] - customer_data[row]['first_purchase_date']).days) / 30
        if months == 0:
            purchase_frequency = customer_quantity  
        else:
            purchase_frequency = customer_quantity / months
            
        if customer_amout < vip_requirement and customer_amout >= normal_requirement:
            customer_amout = f"{customer_amout:,} VND"
            last_date_str = customer_last_order_date.strftime("%Y-%m-%d")
            print(f"|    {customer_id:<11}|  {customer_amout:>17}|{customer_quantity:>7} | {last_date_str:>12} | {int(purchase_frequency):>2} l·∫ßn/th√°ng |")
    print("============================================================================")
    
    print("\n======================= DANH S√ÅCH KH√ÅCH H√ÄNG V√ÉNG LAI =====================")
    print("| M√£ kh√°ch h√†ng |   T·ªïng chi ti√™u   | ƒê√£ mua | Mua g·∫ßn ƒë√¢y  | T·∫ßn su·∫•t mua |")
    print("|---------------|-------------------|--------|--------------|--------------|")
    for row in customer_data:
        customer_id = row
        customer_amout = customer_data[row]['amount']
        customer_quantity = customer_data[row]['quantity']
        customer_last_order_date = customer_data[row]['last_purchase_date']
        months = ((customer_data[row]['last_purchase_date'] - customer_data[row]['first_purchase_date']).days) / 30
        if months == 0:
            purchase_frequency = customer_quantity  
        else:
            purchase_frequency = customer_quantity / months
            
        if customer_amout < normal_requirement:
            customer_amout = f"{customer_amout:,} VND"
            last_date_str = customer_last_order_date.strftime("%Y-%m-%d")
            print(f"|    {customer_id:<11}|  {customer_amout:>17}|{customer_quantity:>7} | {last_date_str:>12} | {int(purchase_frequency):>2} l·∫ßn/th√°ng |")
    print("============================================================================")
# Element to store data
data = []

# Main
while True:
    print()
    print("========== H·ªÜ TH·ªêNG PH√ÇN T√çCH B√ÅN H√ÄNG ==========")
    print("1. Import v√† xem d·ªØ li·ªáu")
    print(" 1.1. Import file CSV")
    print(" 1.2. Xem th·ªëng k√™ t·ªïng quan")
    print(" 1.3. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu")
    print("2. Ph√¢n t√≠ch theo th·ªùi gian")
    print(" 2.1. Doanh thu theo th√°ng")
    print(" 2.2. Doanh thu theo qu√Ω ")
    print(" 2.3. Xu h∆∞·ªõng theo tu·∫ßn")
    print("3. Ph√¢n t√≠ch s·∫£n ph·∫©m")
    print(" 3.1. Top s·∫£n ph·∫©m b√°n ch·∫°y")
    print(" 3.2. Ph√¢n t√≠ch theo danh m·ª•c")
    print(" 3.3. S·∫£n ph·∫©m ·∫ø ·∫©m")
    print("4. Ph√¢n t√≠ch kh√°ch h√†ng")
    print(" 4.1. Kh√°ch h√†ng VIP")
    print(" 4.2. Ph√¢n kh√∫c kh√°ch h√†ng")
    print("5. Visualization v√† b√°o c√°o")
    print(" 5.1. T·∫°o bi·ªÉu ƒë·ªì")
    print(" 5.2. Dashboard t·ªïng quan")
    print(" 5.3. Xu·∫•t b√°o c√°o")
    print("6. D·ª± ƒëo√°n v√† ML")
    print("7. Tho√°t")
    choice = input("\nCh·ªçn ch·ª©c nƒÉng (1-7): ")
    
    if choice == "1.1":
        data = selectOneOne()
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "1.2":
        selectOneTwo()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "1.3":
        print("Ki·ªÉm tra ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu...")
    elif choice == "2.1":
        selectTwoOne()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "2.2":
        selectTwoTwo()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "2.3":
        selectTwoThree()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "3.1":
        selectThreeOne()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "3.2":
        selectThreeTwo()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "3.3":
        selectThreeThree()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "4.1":
        selectFourOne()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "4.2":
        selectFourTwo()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    elif choice == "5.1":
        print("T·∫°o bi·ªÉu ƒë·ªì...")
    elif choice == "5.2":
        print("T·∫°o dashboard t·ªïng quan...")
    elif choice == "5.3":
        print("Xu·∫•t b√°o c√°o...")
    elif choice == "6":
        print("D·ª± ƒëo√°n v√† ML...")
    elif choice == "7":
        print("Tho√°t ch∆∞∆°ng tr√¨nh.")
        break
    